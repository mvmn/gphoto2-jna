package x.mvmn.gphoto2.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraAboutFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraCaptureFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraCapturePreviewFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraExitFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraGetConfigFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraGetSingleConfigFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraListConfigFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraManualFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraPrePostFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraSetConfigFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraSetSingleConfigFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraSummaryFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraTriggerCaptureFunc;
import x.mvmn.gphoto2.jna.Gphoto2Library.CameraWaitForEvent;
/**
 * <i>native declaration : gphoto2/gphoto2-camera.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CameraFunctions extends Structure {
	/**
	 * < \brief Function called before each camera operation.<br>
	 * C type : CameraPrePostFunc
	 */
	public CameraPrePostFunc pre_func;
	/**
	 * < \brief Function called after each camera operation.<br>
	 * C type : CameraPrePostFunc
	 */
	public CameraPrePostFunc post_func;
	/**
	 * < \brief Function called on closing the camera.<br>
	 * C type : CameraExitFunc
	 */
	public CameraExitFunc exit;
	/**
	 * < \brief Called for requesting the configuration widgets.<br>
	 * C type : CameraGetConfigFunc
	 */
	public CameraGetConfigFunc get_config;
	/**
	 * < \brief Called after a configuration was changed<br>
	 * C type : CameraSetConfigFunc
	 */
	public CameraSetConfigFunc set_config;
	/**
	 * < \brief Called for listing the available configuration widgets.<br>
	 * C type : CameraListConfigFunc
	 */
	public CameraListConfigFunc list_config;
	/**
	 * < \brief Called for requesteing a single widget.<br>
	 * C type : CameraGetSingleConfigFunc
	 */
	public CameraGetSingleConfigFunc get_single_config;
	/**
	 * < \brief Called for setting a single configuration widget.<br>
	 * C type : CameraSetSingleConfigFunc
	 */
	public CameraSetSingleConfigFunc set_single_config;
	/**
	 * < \brief Remote control the camera to capture<br>
	 * C type : CameraCaptureFunc
	 */
	public CameraCaptureFunc capture;
	/**
	 * < \brief Remote control the camera to trigger capture<br>
	 * C type : CameraTriggerCaptureFunc
	 */
	public CameraTriggerCaptureFunc trigger_capture;
	/**
	 * < \brief Preview viewfinder content.<br>
	 * C type : CameraCapturePreviewFunc
	 */
	public CameraCapturePreviewFunc capture_preview;
	/**
	 * < \brief Give a summary about the current camera status, translated.<br>
	 * C type : CameraSummaryFunc
	 */
	public CameraSummaryFunc summary;
	/**
	 * < \brief Give a brief manual about any specific items a user has to know, translated.<br>
	 * C type : CameraManualFunc
	 */
	public CameraManualFunc manual;
	/**
	 * < \brief A little About text, including authors and credits.<br>
	 * C type : CameraAboutFunc
	 */
	public CameraAboutFunc about;
	/**
	 * < \brief Wait for a specific event from the camera<br>
	 * C type : CameraWaitForEvent
	 */
	public CameraWaitForEvent wait_for_event;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved1;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved2;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved3;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved4;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved5;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved6;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved7;
	/**
	 * < \brief reserved for future use<br>
	 * C type : void*
	 */
	public Pointer reserved8;
	public CameraFunctions() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("pre_func", "post_func", "exit", "get_config", "set_config", "list_config", "get_single_config", "set_single_config", "capture", "trigger_capture", "capture_preview", "summary", "manual", "about", "wait_for_event", "reserved1", "reserved2", "reserved3", "reserved4", "reserved5", "reserved6", "reserved7", "reserved8");
	}
	public CameraFunctions(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CameraFunctions implements Structure.ByReference {
		
	};
	public static class ByValue extends CameraFunctions implements Structure.ByValue {
		
	};
}
